#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________


# .data
# equal: .string "EQUAL"
# array:.byte 1, 2, 3, 4, 5, 6, 7, 8 ,01, 4, 121
# nutequal: .string "NUTEQUAL"
# string2: .byte 65, 66,68, 0 , 'u', 'l'

# .text
# li x4, 5
# li x3 10

# _____________________printing integer
# li a1, 65
# li a0, 1
# ecall

# _________________printing character
# li a1, 65
# li a0, 11
# ecall

# _________________printing character (simple way)
# li a1, 'A'
# li a0, 11
# ecall

# ________________printing character (simple way)
# li a1, '\n'
# li a0, 11
# ecall

#printing strings

# hard way to get the address
#li a1, 0x10000000

# ___________simple way 
# la a1, equal
# li a0, 4
# ecall

# _______________printing character (simple way)
# li a1, '\n'
# li a0, 11
# ecall

# ______________________simple way 
# la a1, nutequal
# li a0, 4
# ecall

# _____________________printing character (simple way)
# li a1, '\n'
# li a0, 11
# ecall

# ______________________simple way 
# la a1, string2
# li a0, 4
# ecall




#____________________to exit 
# li a0, 10
# ecall




# beq x3 x4 T 
# addi a1, nutequal 
# j prnt

# T:
# li a1, equal
# j prnt

# prnt:
# li a0 1
# ecall

#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________



#________________________________________ TASK 1 Lab 4 ________________________________#


# .data #___________________to storing in the memory.

# equal: .string "EQUAL"
# nutequal: .string "NUTEQUAL"

# .text #_________________ writ the code.
# li x4, 5 #______________ x4 = 5
# li x3 10 #______________ x5 = 10



# beq x3 x4 T #_______________ if ( x3 == x4  ) go to T. if not go to next line.

# la a1, nutequal # ___________load Addres nuteqal in to a1 
# j print #_____________________ go to print in line 111 

# T: #__________________________if is truth do the next too lines
# la a1, equal # _______________load Addres eqal in to a1
# j print #_____________________ go to print in line 111


# print: #_______________________algruthem for print 
# li a0 4#_______________________4 is code for tybe and 4 is mane STRING.
# ecall # _______________________call 

# li a0, 10 #____________________to exit 
# ecall

#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________




#________________________________________ TASK 2 Lab 4 ________________________________#

# # ________________________________ int main() {
# #________________________________          int arr[100];
# #________________________________          // Storing values 0, 1, 2, ..., 99 in the array
# #________________________________          for (int i = 0; i < 100; i++) {
# #________________________________          arr[i] = i;
# #________________________________          }
# #________________________________ return 0;
# #________________________________ }

# .data 
# #done : .string "DONE LOADING"
# arr : .word 1 #__________ Starting address


# .text 
# la x1 arr #_______________________ address in reg x1
# li x5, 0

# start:
# addi x2 x0 100 #_______________________ x2 = 100

# beq x5 x2 truth #_________________ if x5 == x2 go to truth, if not do the next :-
# slli x6, x5, 2 #__________________ x6 = x5 << 2
# add x6, x6, x1 #__________________ arr = new address
# sw x5, 0(x6)   #__________________ arr[i] = i;
# addi x5 x5 1 #____________________ i++
# j start

# truth:
# li a1 'a'
# li a0 11
# ecall 


#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________



#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________



#________________________________________ TASK 3 Lab 4 ________________________________#
                    # Task 3: Vector Addition
                    # 1. Write a RISC-V assembly program to perform vector addition. Given two
                    # arrays of unsigned characters, add the corresponding elements of the
                    # arrays and store the result in a third array of integers. Size of each array
                    # is 8 elements.
                    
                    #include <stdio.h>
                    #int main() {
                    #unsigned char vector1[8] = {1, 2, 3, 4, 5, 6, 7, 8};
                    #unsigned char vector2[8] = {9, 10, 11, 12, 13, 14, 15, 16};
                    #int result[8];
                    #for (int i = 0; i < 8; i++) {
                    #result[i] = (int)vector1[i] + (int)vector2[i];
                    #}
                    #return 0;
                    #}
                    
# .data                    
# vector1: .byte 1,2,3,4,5,6,7,8 #_________ unsigned char vector1[8] = {1, 2, 3, 4, 5, 6, 7, 8};
# vector2: .byte 9,10,11,12,13,14,15,16 #__ unsigned char vector2[8] = {9, 10, 11, 12, 13, 14, 15, 16};
# result: .space 32 #______________________ 4 byet

# .text
# la x1 vector1
# la x2 vector2
# la x3 result 
# li x4 0 #________________________________ i = 0

# LoobStart:
# li x5 8 #________________________________ for i < 8
# beq x3 x5 end
# lb x6 0(x1) #____________________________ (int)vector1[i]
# lb x7 0(x2) #____________________________ (int)vector2[i]
# add x8 x6 x7 #___________________________ x8 = (int)vector1[i] + (int)vector2[i];
# sw x8 0(x3) #____________________________ result[i]

# addi x1 x1 1 #___________________________ (int)vector1[i] = i + 1
# addi x2 x2 1 #___________________________ (int)vector2[i] = i + 1
# addi x3 x3 1 #___________________________ result[i] = i + 1

# j LoobStart

# end: #___________________________________ to exit
# li a0, 10
# ecall
                    


#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________




#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________



#________________________________________ TASK 4 Lab 4 ________________________________#
##                         Task 4: Multiplication of Two Numbers
##                         1. Write a RISC-V assembly program to multiply two numbers, without
##                         using the mul instruction. You must use arithmetic and logical
##                         operations (add, shift, and logical instructions) to simulate the
##                         multiplication operation.

##                         #include <stdio.h>
##                         int main() {
##                         int a = 5; // First number
##                         int b = 6; // Second number
##                         int result = 0;
##                         while (b > 0) {
##                         if (b & 1) { // If the least significant bit of b is 1
##                         result += a; // Add the current value of a to result
##                         }
##                         a <<= 1; // Double the value of a (equivalent to a = a * 2)
##                         b >>= 1; // Halve the value of b (equivalent to b = b / 2)
##                         }
##                         printf("%d * %d = %d\n", a, b, result); // Print the result
##                         return 0;
##                         }


# .data
# a:      .word 5               # First number
# b:      .word 5               # Second number
# result: .word 0               # Result initialized to 0

# .text
# .globl main
# main:
# la x1, a                  # Load address of a into x1
# la x2, b                  # Load address of b into x2
# la x3, result             # Load address of result into x3
# lw x4, 0(x1)              # x4 = a
# lw x5, 0(x2)              # x5 = b
# li x6, 0                  # x6 = result = 0

# LoopStart:
# blez x5, End              # If b <= 0, exit loop
# andi x7, x5, 1            # x7 = b & 1
# beqz x7, SkipAdd          # If (b & 1) == 0, skip addition
# add x6, x6, x4            # result += a

# SkipAdd:
# slli x4, x4, 1            # Double a (a = a << 1)
# srli x5, x5, 1            # Halve b (b = b >> 1)
# j LoopStart               # Repeat loop

# End:
# sw x6, 0(x3)              # Save result into memory
# li a0, 10                 # Exit syscall
# ecall




#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________






#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________

#________________________________________ TASK 5 Lab 4 ________________________________#

#                      #Write a RISC-V assembly program that prints a pyramid shape of stars
#                      #(*). The number of rows of the pyramid, n, will be provided in the a0
#                      #register.
#                       #     *
#                       #    ***
#                       #   *****
#                       #  *******
#                       # *********








#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________
#__________________________________________________________________________________________________________________


